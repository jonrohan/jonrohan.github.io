<?xml version="1.0" encoding="UTF-8" ?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>

    <title>Jon Rohan</title>
    <link>http://jonrohan.codes</link>
    <description><![CDATA[Web Designer & Developer]]></description>
    <language>en</language>
    <lastBuildDate>2012-01-20T00:00:00-05:00</lastBuildDate>
    <copyright><![CDATA[
      &copy; Jon Rohan 2015. All rights reserved.
    ]]></copyright>

    
    <item>
      <title>Class Naming: Semantic Approach</title>
      <link>http://jonrohan.codes/fieldnotes/semantic-css-class-naming</link>
      <description>With the rise of web standards we have seen the rise of the semantic web. This applies to the HTML elements selected as well as the class names chosen for the HTML. When choosing semantic elements and class names you want to pick a name considering the function or meaning of the element as it is on your page, not the position or style of the element.</description>
      <guid isPermaLink="true">http://jonrohan.codes/fieldnotes/semantic-css-class-naming</guid>
      <pubDate>2012-01-20T00:00:00-05:00</pubDate>
      <category>fieldnotes</category>
      
      <category>html</category>
      
      <category>dom</category>
      
      <category>css</category>
      
      <content:encoded><![CDATA[<h3 id="the-semantic-web">The Semantic Web</h3>

<p>With the rise of web standards we have seen the rise of the semantic web. This applies to the HTML elements selected as well as the class names chosen for the HTML. When choosing semantic elements and class names you want to pick a name considering the function or meaning of the element as it is on your page, not the position or style of the element.</p>

<h3 id="the-meaning">The Meaning</h3>
<p>What exactly am I talking about “meaning” or “function”? This means that when picking a name you want to pick one regardless of where it is, only what it contains or what you’re using it for.</p>

<p>example: Imagine we have some markup that represents a search result</p>

<p><strong>THE BAD WAY</strong></p>

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"search-result"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"search-result-large-header"</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">""</span><span class="nt">&gt;</span>My Search Result<span class="nt">&lt;/a&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"search-result-gray-description"</span><span class="nt">&gt;</span>This is the best search result<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"bottom-search-result-info"</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">""</span><span class="nt">&gt;</span>1 comment<span class="nt">&lt;/a&gt;</span> <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">""</span><span class="nt">&gt;</span>12 views<span class="nt">&lt;/a&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span></code></pre></div>

<p>There is a lot of things wrong with this. To name a few, there are too many unnecessary DIV’s;  The class names have style and position specific properties; Since this is a search result, multiples of these makes me want to pass out.</p>

<p><strong>THE SEMANTIC WAY</strong></p>

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"search-result"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h3&gt;&lt;a</span> <span class="na">href=</span><span class="s">""</span><span class="nt">&gt;</span>My Search Result<span class="nt">&lt;/a&gt;&lt;/h3&gt;</span>
  <span class="nt">&lt;p&gt;</span>This is the best search result<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"meta"</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">""</span><span class="nt">&gt;</span>1 comment<span class="nt">&lt;/a&gt;</span> <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">""</span><span class="nt">&gt;</span>12 views<span class="nt">&lt;/a&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span></code></pre></div>

<p>using the semantic way, I don’t need as many divs and when I do use a div I try to pick a name that describes what I’m putting in the tag. I’m calling it “meta” because that info is the meta data for that search result. It has nothing to do with the bottom, and it doesn’t need “search-result” in the name because it is a child of search-result anyways.</p>

<p>I also selected h3 and p elements because an h3 refers to a heading, which the title of the search result is certainly a heading, and p, because this is a paragraph of text which describes the search result.</p>

<p>You may ask, “What’s the big deal? It’s all gonna render the same in the browser anyways?” The benefits for semantic code translate into faster development time, javascript traversal becomes easier and it makes me happy. :)</p>

<p>Some more bad names that I have witnessed: <code>.padding5px</code>, <code>.topBorderGreen</code>, <code>.redErrorText</code>. What happens if you want a padding of 4px, or suddenly the border becomes blue, or if the error text becomes yellow. Then you’ll need to go back through all your html and re-name classes. May I suggest names like <code>.content</code>, <code>.important</code>, or <code>.error</code>.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>List of Git Contributors</title>
      <link>http://jonrohan.codes/fieldnotes/list-git-contributors</link>
      <description>Get a list of git contributors and sort by number of commits.</description>
      <guid isPermaLink="true">http://jonrohan.codes/fieldnotes/list-git-contributors</guid>
      <pubDate>2012-01-15T00:00:00-05:00</pubDate>
      <category>fieldnotes</category>
      
      <content:encoded><![CDATA[<p>This is one of my favorite Git commands, I think mainly because I like to see where I am in a list of contributors.</p>

<div class="highlight"><pre><code class="language-sh" data-lang="sh">git shortlog -s -n</code></pre></div>

<p>This produces an ordered list of contributors to a Git repo, based on number of commits. Like this:</p>

<div class="highlight"><pre><code class="language-sh" data-lang="sh">450 Jon Rohan
230 Jim Smith
100 Joe Jones
2 Fred Smith</code></pre></div>

<p>Go ahead and try it on your repo.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>@font-face</title>
      <link>http://jonrohan.codes/fieldnotes/font-face</link>
      <description>Surprisingly embed-able opentype fonts have been included in Internet Explorer since version 4. But with the recent release of Firefox 3.5 and Safari, you can now embed Opentype and Truetype fonts across all major browsers. It&#39;s pretty simple and here&#39;s how it&#39;s done.</description>
      <guid isPermaLink="true">http://jonrohan.codes/fieldnotes/font-face</guid>
      <pubDate>2011-07-12T00:00:00-04:00</pubDate>
      <category>fieldnotes</category>
      
      <content:encoded><![CDATA[<p>Surprisingly embed-able opentype fonts have been included in Internet Explorer since version 4. But with the recent release of Firefox 3.5 and Safari, you can now embed Opentype and Truetype fonts across all major browsers. It’s pretty simple and here’s how it’s done.</p>

<p>First you must define your font, basically tell the browser where to get the font file, and what you’re going to call it.</p>

<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="c">/* For IE */</span>
<span class="k">@font-face</span> <span class="p">{</span>
    <span class="nl">font-family</span><span class="p">:</span> <span class="s2">'Komika Display'</span><span class="p">;</span>
    <span class="nl">src</span><span class="p">:</span> <span class="sx">url('Komika_display.eot')</span><span class="p">;</span>
<span class="p">}</span>
<span class="c">/* For Other Browsers */</span>
<span class="k">@font-face</span> <span class="p">{</span>
    <span class="nl">font-family</span><span class="p">:</span> <span class="s2">'Komika Display'</span><span class="p">;</span>
    <span class="nl">src</span><span class="p">:</span> <span class="n">local</span><span class="p">(</span><span class="s2">'Komika Display Regular'</span><span class="p">),</span>
    <span class="n">local</span><span class="p">(</span><span class="s2">'KomikaDisplay-Regular'</span><span class="p">),</span>
    <span class="sx">url('Komika_display.ttf')</span> <span class="n">format</span><span class="p">(</span><span class="s2">'truetype'</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">@font-face</span> <span class="p">{</span>
    <span class="nl">font-family</span><span class="p">:</span> <span class="s2">'Komika Display'</span><span class="p">;</span>
    <span class="nl">src</span><span class="p">:</span> <span class="n">local</span><span class="p">(</span><span class="s2">'Komika Display Bold'</span><span class="p">),</span>
    <span class="n">local</span><span class="p">(</span><span class="s2">'KomikaDisplay-Bold'</span><span class="p">),</span>
    <span class="sx">url('Komika_display_bold.ttf')</span> <span class="n">format</span><span class="p">(</span><span class="s2">'truetype'</span><span class="p">);</span>
    <span class="nl">font-weight</span><span class="p">:</span> <span class="nb">bold</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">@font-face</span> <span class="p">{</span>
    <span class="nl">font-family</span><span class="p">:</span> <span class="s2">'Komika Display Kaps'</span><span class="p">;</span>
    <span class="nl">src</span><span class="p">:</span> <span class="n">local</span><span class="p">(</span><span class="s2">'Komika Display Kaps Regular'</span><span class="p">),</span>
    <span class="n">local</span><span class="p">(</span><span class="s2">'KomikaDisplayKaps-Regular'</span><span class="p">),</span>
    <span class="sx">url('Komika_display_kaps.ttf')</span> <span class="n">format</span><span class="p">(</span><span class="s2">'truetype'</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">@font-face</span> <span class="p">{</span>
    <span class="nl">font-family</span><span class="p">:</span> <span class="s2">'Komika Display Kaps'</span><span class="p">;</span>
    <span class="nl">src</span><span class="p">:</span> <span class="n">local</span><span class="p">(</span><span class="s2">'Komika Display Kaps Bold'</span><span class="p">),</span>
    <span class="n">local</span><span class="p">(</span><span class="s2">'KomikaDisplayKaps-Bold'</span><span class="p">),</span>
    <span class="sx">url('Komika_display_kaps_bold.ttf')</span> <span class="n">format</span><span class="p">(</span><span class="s2">'truetype'</span><span class="p">);</span>
    <span class="nl">font-weight</span><span class="p">:</span> <span class="nb">bold</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

<p>ok, now that you have defined your font, you can use it.</p>

<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">body</span> <span class="p">{</span>
    <span class="nl">font-family</span><span class="p">:</span> <span class="s1">"Komika Display Kaps"</span><span class="p">,</span> <span class="nb">sans-serif</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

<p>And here’s what it looks like:</p>

<p data-height="113" data-theme-id="14162" data-slug-hash="LEwXgY" data-default-tab="result" data-user="jonrohan" class="codepen">See the Pen <a href="http://codepen.io/jonrohan/pen/LEwXgY/">LEwXgY</a> by Jon Rohan (<a href="http://codepen.io/jonrohan">@jonrohan</a>) on <a href="http://codepen.io">CodePen</a>.</p>

<p>The second part of this tutorial is should you use font-face?</p>

<p>This is another call to your server, which when u have a huge website, isn’t a great thing. But compared to most things on a website, this size is tiny.</p>

<p>You have to consider too, for the designers who need the exact font everywhere this is a better alternative than to cut images for every heading on the website, or for the nav. And bonus! The text is still crawl-able by search engines.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Clear Fixes</title>
      <link>http://jonrohan.codes/fieldnotes/clear-fixes</link>
      <description>There is a common problem in front end engineering where, when you float an element it is actually removed from it&#39;s parents&#39; flow. This can cause the elements below the floating element to run into the floating elements.</description>
      <guid isPermaLink="true">http://jonrohan.codes/fieldnotes/clear-fixes</guid>
      <pubDate>2011-01-20T00:00:00-05:00</pubDate>
      <category>fieldnotes</category>
      
      <content:encoded><![CDATA[<p>There is a common problem in front end engineering where, when you float an element it is actually removed from it’s parents’ flow. This can cause the elements below the floating element to run into the floating elements. Like below. The green box is floating and it’s parent has the red border. The blue box is below the red border box.</p>

<div style="overflow:hidden;">
  <div style="border:1px solid red;">
    <div style="background-color:green;float:left;width:20px;height:20px;"></div>
  </div>
  <div style="background-color:blue;width:50px;height:50px;"></div>
</div>

<p>There are a few solutions to this, but I have heard of a new solution that I don’t think is widely published. <code>overflow:hidden;</code></p>

<p>First lets go through the other solutions.</p>

<h3 id="clearboth">clear:both</h3>

<p>This is the most common that I’ve found, and the one I’ve used the most. The style in this code is inline, but typically you can just create a class called .clear and apply these styles.</p>

<div style="border:1px solid red;">
  <div style="background-color:green;float:left;width:20px;height:20px;"></div>
  <div style="clear:both;"></div>
</div>

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"border:1px solid red;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"background-color:green;float:left;width:20px;height:20px;"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"clear:both;"</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span></code></pre></div>

<p>In this example you place another element at the end of the child elements in the red border box. This last element gets applied the style <code>clear:both</code> which disallows any floating elements on either side of it.</p>

<p>This can run into problems if you have multi-column layouts this can clear the content in the other columns</p>

<h3 id="clearfix-hack">clearfix hack</h3>

<p>This is essentially taking the previous method and adding to it. I don’t use this very often.</p>

<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nc">.clearfix</span><span class="nd">:after</span> <span class="p">{</span>
  <span class="nl">content</span><span class="p">:</span> <span class="s1">"."</span><span class="p">;</span>
  <span class="nl">display</span><span class="p">:</span> <span class="nb">block</span><span class="p">;</span>
  <span class="nl">clear</span><span class="p">:</span> <span class="nb">both</span><span class="p">;</span>
  <span class="nl">visibility</span><span class="p">:</span> <span class="nb">hidden</span><span class="p">;</span>
  <span class="nl">line-height</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.clearfix</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">inline-block</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">html</span><span class="o">[</span><span class="nt">xmlns</span><span class="o">]</span> <span class="nc">.clearfix</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="nb">block</span><span class="p">;</span>
<span class="p">}</span>
<span class="o">*</span> <span class="nt">html</span> <span class="nc">.clearfix</span> <span class="p">{</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">1%</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

<div style="border:1px solid red;line-height:20px;">
  <div style="background-color:green;float:left;width:20px;height:20px;"></div>
  <div class="clearfix"></div>
</div>
<div style="background-color:blue;width:50px;height:50px;"></div>

<p>This method works but it feels like a lot of overhead, and now my CSS is non-standard.</p>

<h3 id="overflowhidden">overflow:hidden</h3>

<p>In this method you apply overflow:hidden to the parent element which is the red border box. And that’s it!</p>

<div style="border:1px solid red;overflow:hidden;">
  <div style="background-color:green;float:left;width:20px;height:20px;"></div>
</div>
<div style="background-color:blue;width:50px;height:50px;"></div>

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"border:1px solid red;overflow:hidden;"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"background-color:green;float:left;width:20px;height:20px;"</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"background-color:blue;width:50px;height:50px;"</span><span class="nt">&gt;&lt;/div&gt;</span></code></pre></div>

<p>Pretty simple! And it doesn’t require extra div tags. I’ve tested this in IE7, Firefox, Safari, and Chrome works in all.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Creating Triangles in CSS</title>
      <link>http://jonrohan.codes/fieldnotes/creating-triangles-in-css</link>
      <description>I&#39;ve come across a few techniques and tips in my career, while working at my last gig a co-worker pointed me to this technique. I believe this was originally discovered by the legendary Eric Meyer, but I couldn&#39;t find much documentation about it on the web so I thought I would describe it here.</description>
      <guid isPermaLink="true">http://jonrohan.codes/fieldnotes/creating-triangles-in-css</guid>
      <pubDate>2011-01-18T00:00:00-05:00</pubDate>
      <category>fieldnotes</category>
      
      <category>howto</category>
      
      <category>effects</category>
      
      <category>css</category>
      
      <content:encoded><![CDATA[<p>I’ve come across a few techniques and tips in my career, while working at my last gig a co-worker pointed me to this technique. I believe this was originally discovered by the legendary Eric Meyer, but I couldn’t find much documentation about it on the web so I thought I would describe it here.</p>

<h3 id="how-it-works">How it works</h3>

<p>Few people realize when a browser draws the borders, it draws them at angles. This technique takes advantage of that. One side of the border is colored for the color of the arrow, and the rest are transparent. Then you set the width of the border to something large, the ones above are 20px. To demonstrate here is a div with all sides colored.</p>

<div class="docs-example clearfix"><div class="css-arrow-multicolor"></div></div>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"css-arrow-multicolor"</span><span class="nt">&gt;&lt;/div&gt;</span></code></pre></div>

<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nc">.css-arrow-multicolor</span> <span class="p">{</span>
  <span class="nl">border-color</span><span class="p">:</span> <span class="no">red</span> <span class="no">green</span> <span class="no">blue</span> <span class="no">orange</span><span class="p">;</span>
  <span class="nl">border-style</span><span class="p">:</span><span class="nb">solid</span><span class="p">;</span>
  <span class="nl">border-width</span><span class="p">:</span><span class="m">20px</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span><span class="m">0</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span><span class="m">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

<p>As you can see there are triangles hidden in that square. These triangles are right triangles with a little tweaking with the border sizes you can get acute triangles.</p>

<div class="docs-example clearfix"><div class="css-arrow-acute"></div></div>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"css-arrow-acute"</span><span class="nt">&gt;&lt;/div&gt;</span></code></pre></div>

<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nc">.css-arrow-acute</span> <span class="p">{</span>
  <span class="nl">border-color</span><span class="p">:</span> <span class="no">red</span> <span class="no">green</span> <span class="no">blue</span> <span class="no">orange</span><span class="p">;</span>
  <span class="nl">border-style</span><span class="p">:</span><span class="nb">solid</span><span class="p">;</span>
  <span class="nl">border-width</span><span class="p">:</span><span class="m">25px</span> <span class="m">10px</span> <span class="m">15px</span> <span class="m">30px</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span><span class="m">0</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span><span class="m">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

<p>With a little creativity and tweaking there are lots of shapes that can be made.</p>

<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">border-style</span><span class="nd">:dotted</span><span class="o">;</span></code></pre></div>

<div class="docs-example clearfix"><div class="css-arrow-multicolor" style="border-style:dotted;"></div></div>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"css-arrow-multicolor"</span> <span class="na">style=</span><span class="s">"border-style:dotted;"</span><span class="nt">&gt;&lt;/div&gt;</span></code></pre></div>

<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">border-style</span><span class="nd">:dashed</span><span class="o">;</span></code></pre></div>

<div class="docs-example clearfix"><div class="css-arrow-multicolor" style="border-style:dashed;"></div></div>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"css-arrow-multicolor"</span> <span class="na">style=</span><span class="s">"border-style:dashed;"</span><span class="nt">&gt;&lt;/div&gt;</span></code></pre></div>

<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">border-style</span><span class="nd">:outset</span><span class="o">;</span></code></pre></div>

<div class="docs-example clearfix"><div class="css-arrow-multicolor" style="border-style:outset;"></div></div>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"css-arrow-multicolor"</span> <span class="na">style=</span><span class="s">"border-style:outset;"</span><span class="nt">&gt;&lt;/div&gt;</span></code></pre></div>

<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">border-style</span><span class="nd">:inset</span><span class="o">;</span></code></pre></div>

<div class="docs-example clearfix"><div class="css-arrow-multicolor" style="border-style:inset;"></div></div>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"css-arrow-multicolor"</span> <span class="na">style=</span><span class="s">"border-style:inset;"</span><span class="nt">&gt;&lt;/div&gt;</span></code></pre></div>

<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">border-style</span><span class="nd">:ridge</span><span class="o">;</span></code></pre></div>

<div class="docs-example clearfix"><div class="css-arrow-multicolor" style="border-style:ridge;"></div></div>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"css-arrow-multicolor"</span> <span class="na">style=</span><span class="s">"border-style:ridge;"</span><span class="nt">&gt;&lt;/div&gt;</span></code></pre></div>

<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">border-style</span><span class="nd">:groove</span><span class="o">;</span></code></pre></div>

<div class="docs-example clearfix"><div class="css-arrow-multicolor" style="border-style:groove;"></div></div>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"css-arrow-multicolor"</span> <span class="na">style=</span><span class="s">"border-style:groove;"</span><span class="nt">&gt;&lt;/div&gt;</span></code></pre></div>

<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">border-style</span><span class="nd">:double</span><span class="o">;</span></code></pre></div>

<div class="docs-example clearfix"><div class="css-arrow-multicolor" style="border-style:double;"></div></div>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"css-arrow-multicolor"</span> <span class="na">style=</span><span class="s">"border-style:double;"</span><span class="nt">&gt;&lt;/div&gt;</span></code></pre></div>

<p>Now for application:</p>

<div class="docs-example clearfix"><div class="chat-bubble">
  Buongiorno!
  <div class="chat-bubble-arrow-border"></div>
  <div class="chat-bubble-arrow"></div>
</div></div>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"chat-bubble"</span><span class="nt">&gt;</span>
  Buongiorno!
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"chat-bubble-arrow-border"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"chat-bubble-arrow"</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span></code></pre></div>

<p>This is a classic chat bubble, no images used.</p>

<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nc">.chat-bubble</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span><span class="m">#EDEDED</span><span class="p">;</span>
  <span class="nl">border</span><span class="p">:</span><span class="m">2px</span> <span class="nb">solid</span> <span class="m">#666666</span><span class="p">;</span>
  <span class="nl">font-size</span><span class="p">:</span><span class="m">35px</span><span class="p">;</span>
  <span class="nl">line-height</span><span class="p">:</span><span class="m">1.3em</span><span class="p">;</span>
  <span class="nl">margin</span><span class="p">:</span><span class="m">10px</span> <span class="nb">auto</span><span class="p">;</span>
  <span class="nl">padding</span><span class="p">:</span><span class="m">10px</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span><span class="nb">relative</span><span class="p">;</span>
  <span class="nl">text-align</span><span class="p">:</span><span class="nb">center</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span><span class="m">300px</span><span class="p">;</span>
  <span class="nl">-moz-border-radius</span><span class="p">:</span><span class="m">10px</span><span class="p">;</span>
  <span class="nl">-webkit-border-radius</span><span class="p">:</span><span class="m">10px</span><span class="p">;</span>
  <span class="nl">-moz-box-shadow</span><span class="p">:</span><span class="m">0</span> <span class="m">0</span> <span class="m">5px</span> <span class="m">#888888</span><span class="p">;</span>
  <span class="nl">-webkit-box-shadow</span><span class="p">:</span><span class="m">0</span> <span class="m">0</span> <span class="m">5px</span> <span class="m">#888888</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.chat-bubble-arrow-border</span> <span class="p">{</span>
  <span class="nl">border-color</span><span class="p">:</span> <span class="m">#666666</span> <span class="nb">transparent</span> <span class="nb">transparent</span> <span class="nb">transparent</span><span class="p">;</span>
  <span class="nl">border-style</span><span class="p">:</span> <span class="nb">solid</span><span class="p">;</span>
  <span class="nl">border-width</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span><span class="m">0</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span><span class="m">0</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span><span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">bottom</span><span class="p">:</span><span class="m">-22px</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span><span class="m">30px</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.chat-bubble-arrow</span> <span class="p">{</span>
  <span class="nl">border-color</span><span class="p">:</span> <span class="m">#EDEDED</span> <span class="nb">transparent</span> <span class="nb">transparent</span> <span class="nb">transparent</span><span class="p">;</span>
  <span class="nl">border-style</span><span class="p">:</span> <span class="nb">solid</span><span class="p">;</span>
  <span class="nl">border-width</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span><span class="m">0</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span><span class="m">0</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span><span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">bottom</span><span class="p">:</span><span class="m">-19px</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span><span class="m">30px</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

<p>This technique doesn’t work in ie6 as is, mainly because ie6 doesn’t allow transparent borders, but there is a fix for that. What you need to do is give the “transparent” sides a completely different color like pink and then use filter: chroma to turn that color transparent.</p>

<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="c">/* IE6 */</span>
<span class="nc">.chat-bubble-arrow</span> <span class="p">{</span>
    <span class="py">_border-left-color</span><span class="p">:</span> <span class="no">pink</span><span class="p">;</span>
    <span class="py">_border-bottom-color</span><span class="p">:</span> <span class="no">pink</span><span class="p">;</span>
    <span class="py">_border-right-color</span><span class="p">:</span> <span class="no">pink</span><span class="p">;</span>
    <span class="py">_filter</span><span class="p">:</span> <span class="n">chroma</span><span class="p">(</span><span class="n">color</span><span class="err">=</span><span class="no">pink</span><span class="p">);</span>
<span class="p">}</span></code></pre></div>

]]></content:encoded>
    </item>
    
    <item>
      <title>Classes and Inheritance</title>
      <link>http://jonrohan.codes/fieldnotes/classes-and-inheritance</link>
      <description>Object oriented JavaScript is everywhere today, and its the type of thing that takes a developer from someone tinkering with JavaScript on the path to becoming a JavaScript ninja.</description>
      <guid isPermaLink="true">http://jonrohan.codes/fieldnotes/classes-and-inheritance</guid>
      <pubDate>2010-10-15T00:00:00-04:00</pubDate>
      <category>fieldnotes</category>
      
      <content:encoded><![CDATA[<p>Object oriented JavaScript is everywhere today, and its the type of thing that takes a developer from someone tinkering with JavaScript on the path to becoming a JavaScript ninja. In this post I’m gonna discuss the basics of creating a JavaScript class, and a subclass which inherits methods from the superclass.</p>

<h3>A JavaScript Class</h3>

<p>Let’s start out with a basic class. The Person class has one method getName, when you create a new instance of the Person class you will pass in the Person’s name.</p>

<h4>The Person class</h4>

<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

<p>So in the above example I created a Person class with a name attribute and a function to retrieve the name. Now I’ll create a new person, “Jon Rohan”.</p>

<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s2">"Jon Rohan"</span><span class="p">);</span>
<span class="c1">// output: Jon Rohan</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span></code></pre></div>

<p>The &lt;pre&gt;p&lt;/pre&gt; is a new Person with the name “Jon Rohan”, when I log to the console the result of &lt;pre&gt;p.getName()&lt;/pre&gt; it returns “Jon Rohan”.</p>

<h3>Prototype Chain</h3>

<p>Now we bring in the prototype chain. The chain is like an inheritance chain. Developer inherits → from Person. So we are defining a Developer as a Person, cause developers are people too. ;-) The developer takes the name attribute like Person, and an array of skills. The first line of the Developer class is to &lt;pre&gt;call&lt;/pre&gt; the Person class. This calls the Person’s constructor. The Developer class also has a new method getSkills, because a Person is too general to have skills, but as a Developer, there are skills that they have.</p>

<p>We also need to set Developer.prototype to the Person’s prototype, by creating a new Person. Now we set the Developer’s constructor to the Developer. And we have successfully created a prototype chain from Developer to Person.</p>

<h4>The Developer Class</h4>

<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">Developer</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">skills</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">Person</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">name</span><span class="p">);</span> <span class="c1">// we call the Person constructor since it's the superclass</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">skills</span> <span class="o">=</span> <span class="nx">skills</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">getSkills</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">skills</span><span class="p">;</span>
  <span class="p">};</span>
<span class="p">}</span>
<span class="nx">Developer</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>
<span class="nx">Developer</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">=</span> <span class="nx">Developer</span><span class="p">;</span></code></pre></div>

<p>Now we’ll create a new Developer, with the name “Jon Rohan” and skills [“Javascript”, “HTML”, “CSS”]. When we create the new developer, he’ll also have the getName method inherited from the Person class, and the getSkills method from the Developer class.</p>

<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Developer</span><span class="p">(</span><span class="s2">"Jon Rohan"</span><span class="p">,[</span><span class="s2">"Javascript"</span><span class="p">,</span> <span class="s2">"HTML"</span><span class="p">,</span> <span class="s2">"CSS"</span><span class="p">]);</span>
<span class="c1">// output: Jon Rohan</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">getName</span><span class="p">());</span>
<span class="c1">// output: Javascript, HTML, CSS</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">getSkills</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s2">", "</span><span class="p">));</span></code></pre></div>

<p>This is the basic ideas behind Object Oriented Programming in JavaScript, I’ve only really scratched the surface in JavaScript OOP.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Text Rotation</title>
      <link>http://jonrohan.codes/fieldnotes/text-rotation</link>
      <description>What I wanted to make was a clock. The basis of this project is using the -webkit-transform:rotate(0deg); css property. This allows you to rotate any object 360 degrees. So I began to wonder, if I have a line, and I setup a javascript timer can I rotate it every second?</description>
      <guid isPermaLink="true">http://jonrohan.codes/fieldnotes/text-rotation</guid>
      <pubDate>2010-10-10T00:00:00-04:00</pubDate>
      <category>fieldnotes</category>
      
      <content:encoded><![CDATA[<p>I recently saw an <a href="http://snook.ca/archives/html_and_css/css-text-rotation">article</a> on CSS text rotation on the internets and decided to try my own experiement.</p>

<p>What I wanted to make was a clock. The basis of this project is using the -webkit-transform:rotate(0deg); css property. This allows you to rotate any object 360 degrees. So I began to wonder, if I have a line, and I setup a javascript timer can I rotate it every second?</p>

<p data-height="309" data-theme-id="14162" data-slug-hash="VYoqwj" data-default-tab="result" data-user="jonrohan" class="codepen">See the Pen <a href="http://codepen.io/jonrohan/pen/VYoqwj/">VYoqwj</a> by Jon Rohan (<a href="http://codepen.io/jonrohan">@jonrohan</a>) on <a href="http://codepen.io">CodePen</a>.</p>

<p>The design is inspired by @<a href="https://twitter.com/eston">eston</a>’s <a href="http://www.flickr.com/photos/eston/3799958463/">Sarai</a> desktop.</p>

<p>This clock won’t work in IE. There is an IE rotate property, but it only rotates at 0, 90, 180, 270. So that won’t work for this clock. Here’s the IE rotate property anyways</p>

<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">filter</span><span class="o">:</span> <span class="nt">progid</span><span class="nd">:DXImageTransform</span><span class="nc">.Microsoft.BasicImage</span><span class="o">(</span><span class="nt">rotation</span><span class="o">=</span><span class="nt">3</span><span class="o">);</span></code></pre></div>

<h3>So How did I do it?</h3>

<p>I started with an external div for the clock. Giving it a width and height of 100px and position relative (so I can position the clock hands)</p>

<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nf">#clock</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span><span class="m">208px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span><span class="m">208px</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span><span class="nb">relative</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

<p>After getting the clock, I need a second hand, a minute hand and an hour hand. Originally I just used a side border on the hands, but realized that the rotate property rotates the object at it’s center, and not at it’s end. So to create the hands, I gave them a border top equal to the length of the hand, then a height to offset the border, and some margin to vertically align.</p>

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"clock"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"ten_min"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(0deg);-webkit-transform:rotate(0deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"ten_min"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(30deg);-webkit-transform:rotate(30deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"ten_min"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(60deg);-webkit-transform:rotate(60deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"ten_min"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(90deg);-webkit-transform:rotate(90deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"ten_min"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(120deg);-webkit-transform:rotate(120deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"ten_min"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(150deg);-webkit-transform:rotate(150deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"min_mark"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(0deg);-webkit-transform:rotate(0deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"min_mark"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(6deg);-webkit-transform:rotate(6deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"min_mark"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(12deg);-webkit-transform:rotate(12deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"min_mark"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(18deg);-webkit-transform:rotate(18deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"min_mark"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(24deg);-webkit-transform:rotate(24deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"min_mark"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(36deg);-webkit-transform:rotate(36deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"min_mark"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(42deg);-webkit-transform:rotate(42deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"min_mark"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(48deg);-webkit-transform:rotate(48deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"min_mark"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(54deg);-webkit-transform:rotate(54deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"min_mark"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(66deg);-webkit-transform:rotate(66deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"min_mark"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(72deg);-webkit-transform:rotate(72deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"min_mark"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(78deg);-webkit-transform:rotate(78deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"min_mark"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(84deg);-webkit-transform:rotate(84deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"min_mark"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(96deg);-webkit-transform:rotate(96deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"min_mark"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(102deg);-webkit-transform:rotate(102deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"min_mark"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(108deg);-webkit-transform:rotate(108deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"min_mark"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(114deg);-webkit-transform:rotate(114deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"min_mark"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(126deg);-webkit-transform:rotate(126deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"min_mark"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(132deg);-webkit-transform:rotate(132deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"min_mark"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(138deg);-webkit-transform:rotate(138deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"min_mark"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(144deg);-webkit-transform:rotate(144deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"min_mark"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(156deg);-webkit-transform:rotate(156deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"min_mark"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(162deg);-webkit-transform:rotate(162deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"min_mark"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(168deg);-webkit-transform:rotate(168deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"min_mark"</span> <span class="na">style=</span><span class="s">"-moz-transform:rotate(174deg);-webkit-transform:rotate(174deg);"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"sec"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"min"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"hour"</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span></code></pre></div>

<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nf">#sec</span> <span class="p">{</span>
  <span class="nl">-moz-transform</span><span class="p">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">0deg</span><span class="p">);</span>
  <span class="nl">-webkit-transform</span><span class="p">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">0deg</span><span class="p">);</span>
  <span class="nl">border-top</span><span class="p">:</span><span class="m">104px</span> <span class="nb">solid</span> <span class="m">#353535</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span><span class="m">104px</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span> <span class="m">104px</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span><span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span><span class="m">2px</span><span class="p">;</span>
<span class="p">}</span>
<span class="nf">#min</span> <span class="p">{</span>
  <span class="nl">-moz-transform</span><span class="p">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">45deg</span><span class="p">);</span>
  <span class="nl">-webkit-transform</span><span class="p">:</span> <span class="n">rotate</span><span class="p">(</span><span class="m">45deg</span><span class="p">);</span>
  <span class="nl">border-top</span><span class="p">:</span><span class="m">104px</span> <span class="nb">solid</span> <span class="m">#353535</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span><span class="m">104px</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span> <span class="m">102px</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span><span class="m">4px</span><span class="p">;</span>
 <span class="p">}</span>
<span class="nf">#hour</span> <span class="p">{</span>
  <span class="nl">-moz-transform</span><span class="p">:</span><span class="n">rotate</span><span class="p">(</span><span class="m">180deg</span><span class="p">);</span>
  <span class="nl">-webkit-transform</span><span class="p">:</span><span class="n">rotate</span><span class="p">(</span><span class="m">180deg</span><span class="p">);</span>
  <span class="nl">border-top</span><span class="p">:</span> <span class="m">52px</span> <span class="nb">solid</span> <span class="nb">rgb</span><span class="p">(</span><span class="m">53</span><span class="p">,</span> <span class="m">53</span><span class="p">,</span> <span class="m">53</span><span class="p">);</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">52px</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span> <span class="m">104px</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">52px</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">5px</span><span class="p">;</span>
<span class="p">}</span>
<span class="nf">#clock</span> <span class="nc">.ten_min</span> <span class="p">{</span>
  <span class="nl">border-bottom</span><span class="p">:</span><span class="m">10px</span> <span class="nb">solid</span> <span class="m">#353535</span><span class="p">;</span>
  <span class="nl">border-top</span><span class="p">:</span><span class="m">10px</span> <span class="nb">solid</span> <span class="m">#353535</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span><span class="m">208px</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span><span class="m">104px</span><span class="p">;</span>
  <span class="nl">margin</span><span class="p">:</span><span class="m">0</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span><span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span><span class="m">-9px</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span><span class="m">5px</span><span class="p">;</span>
<span class="p">}</span>
<span class="nf">#clock</span> <span class="nc">.min_mark</span> <span class="p">{</span>
  <span class="nl">border-bottom</span><span class="p">:</span><span class="m">5px</span> <span class="nb">solid</span> <span class="m">#353535</span><span class="p">;</span>
  <span class="nl">border-top</span><span class="p">:</span><span class="m">5px</span> <span class="nb">solid</span> <span class="m">#353535</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span><span class="m">208px</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span><span class="m">104px</span><span class="p">;</span>
  <span class="nl">margin</span><span class="p">:</span><span class="m">0</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span><span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span><span class="m">-4px</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span><span class="m">1px</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

<p>The tick marks are also the lines, with a top and bottom border rotated 180 degrees.</p>

<p>The javascript is a simple timer which updates the degrees of each hand based on the time.</p>

<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="kd">var</span> <span class="nx">tick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">now</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
    <span class="nx">$</span><span class="p">(</span><span class="s2">"#sec"</span><span class="p">).</span><span class="nx">css</span><span class="p">({</span><span class="s2">"-moz-transform"</span><span class="p">:</span><span class="s2">"rotate("</span> <span class="o">+</span> <span class="p">(</span><span class="nx">now</span><span class="p">.</span><span class="nx">getSeconds</span><span class="p">()</span> <span class="o">*</span> <span class="mi">6</span><span class="p">)</span> <span class="o">+</span> <span class="s2">"deg)"</span><span class="p">,</span>
    <span class="s2">"-webkit-transform"</span><span class="p">:</span><span class="s2">"rotate("</span> <span class="o">+</span> <span class="p">(</span><span class="nx">now</span><span class="p">.</span><span class="nx">getSeconds</span><span class="p">()</span> <span class="o">*</span> <span class="mi">6</span><span class="p">)</span> <span class="o">+</span> <span class="s2">"deg)"</span><span class="p">});</span>
    <span class="nx">$</span><span class="p">(</span><span class="s2">"#min"</span><span class="p">).</span><span class="nx">css</span><span class="p">({</span><span class="s2">"-moz-transform"</span><span class="p">:</span><span class="s2">"rotate("</span> <span class="o">+</span> <span class="p">(</span><span class="nx">now</span><span class="p">.</span><span class="nx">getMinutes</span><span class="p">()</span> <span class="o">*</span> <span class="mi">6</span><span class="p">)</span> <span class="o">+</span> <span class="s2">"deg)"</span><span class="p">,</span>
    <span class="s2">"-webkit-transform"</span><span class="p">:</span><span class="s2">"rotate("</span> <span class="o">+</span> <span class="p">(</span><span class="nx">now</span><span class="p">.</span><span class="nx">getMinutes</span><span class="p">()</span> <span class="o">*</span> <span class="mi">6</span><span class="p">)</span> <span class="o">+</span> <span class="s2">"deg)"</span><span class="p">});</span>
    <span class="nx">$</span><span class="p">(</span><span class="s2">"#hour"</span><span class="p">).</span><span class="nx">css</span><span class="p">({</span><span class="s2">"-moz-transform"</span><span class="p">:</span><span class="s2">"rotate("</span> <span class="o">+</span> <span class="p">(</span><span class="nx">now</span><span class="p">.</span><span class="nx">getHours</span><span class="p">()</span> <span class="o">*</span> <span class="mi">30</span><span class="p">)</span> <span class="o">+</span> <span class="s2">"deg)"</span><span class="p">,</span>
     <span class="s2">"-webkit-transform"</span><span class="p">:</span><span class="s2">"rotate("</span> <span class="o">+</span> <span class="p">(</span><span class="nx">now</span><span class="p">.</span><span class="nx">getHours</span><span class="p">()</span> <span class="o">*</span> <span class="mi">30</span><span class="p">)</span> <span class="o">+</span> <span class="s2">"deg)"</span><span class="p">});</span>
  <span class="p">};</span>
  <span class="nx">setInterval</span><span class="p">(</span><span class="nx">tick</span><span class="p">,</span><span class="mi">1000</span><span class="p">);</span>
<span class="p">})();</span></code></pre></div>

]]></content:encoded>
    </item>
    
    <item>
      <title>Dead Simple Git Workflow</title>
      <link>http://jonrohan.codes/fieldnotes/dead-simple-git-workflow-for-agile-teams</link>
      <description>Recently I have had the privilege to work with a few excellent small agile teams. With each team, they have their own process, which works best for them. And there&#39;s nothing wrong with that, a team should work in it&#39;s most effective way. But I came across a team recently that had a workflow that really impressed me. To put it simply it&#39;s described as an extremely cool Git workflow.</description>
      <guid isPermaLink="true">http://jonrohan.codes/fieldnotes/dead-simple-git-workflow-for-agile-teams</guid>
      <pubDate>2010-10-09T00:00:00-04:00</pubDate>
      <category>fieldnotes</category>
      
      <content:encoded><![CDATA[<p>Recently I have had the privilege to work with a few excellent small agile teams. With each team, they have their own process, which works best for them. And there’s nothing wrong with that, a team should work in it’s most effective way. But I came across a team recently that had a workflow that really impressed me. To put it simply it’s described as an extremely cool Git workflow.</p>

<p>I can’t take credit for coming up with this workflow, but I’m gonna do my best to re-describe it here so it can be shared. The basis for this post comes from reinh.com’s posts <a href="http://reinh.com/blog/2009/03/02/a-git-workflow-for-agile-teams.html">A git workflow for Agile Teams</a> and <a href="http://reinh.com/blog/2008/08/27/hack-and-and-ship.html">Hack &amp;&amp; Ship</a>. Also this workflow pulls alot from Josh Susser’s post on the <a href="http://blog.hasmanythrough.com/2008/12/18/agile-git-and-the-story-branch-pattern">story branch pattern</a>.</p>

<p>Let’s start by summarizing Josh’s post. In his post he describes a 7 step process that begins with <a href="http://www.pivotaltracker.com">Pivotal Tracker</a>. The idea being you locate a story on pivotal tracker, like a bug, or feature, or chore. Then you update your working master by pulling from the origin, and create a whole branch just for that bug. Once you’ve fixed the bug, commited it to your branch, you then merge your branch with the master and push it all back up to the origin. Then just remove the old branch and you’re done.</p>

<p>That’s the basic workflow, but there is alot of automation that can be done. The first is the creation of the branch. This isn’t terribly long command ‘git checkout -b’ but I went ahead and created a shell alias ‘gcb’.</p>

<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nb">alias </span><span class="nv">gcb</span><span class="o">=</span><span class="s1">'git checkout -b'</span></code></pre></div>

<p>So now when creating my branch for working on my bug I just type</p>

<div class="highlight"><pre><code class="language-sh" data-lang="sh">gcb fix_ie_bug_Story123456</code></pre></div>

<p>After creating my branch I would work on it normally doing ‘git commits’ when needed. Then when I’m ready comes the cool part. Hack &amp; Ship. Hack is what it’s called when you pull the lastest code from the origin and merge it with your branch. It’s a good idea to do this often, just to keep everything up to date. To not have to type and remember the few commands for accomplishing this, I use a shell script.</p>

<p>hack.sh</p>

<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="c">#!/bin/sh -x</span>
<span class="gp">\# </span>hack: Merge the latest changes from the master branch into your current branch
<span class="nv">ref</span><span class="o">=</span><span class="k">$(</span>git symbolic-ref HEAD 2&gt; /dev/null<span class="k">)</span> <span class="o">||</span> <span class="nb">exit </span>0
<span class="nv">CURRENT</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">ref</span><span class="p">#refs/heads/</span><span class="k">}</span><span class="s2">"</span>
git checkout master
git pull origin master
git checkout <span class="k">${</span><span class="nv">CURRENT</span><span class="k">}</span>
git rebase master</code></pre></div>

<p>So during my coding, I can at anytime just type the command hack. And my branch is updated!</p>

<p>Once I’ve finished my bug and I’m ready to send it back to the origin I do one more ‘hack’, make sure it’s all updated. And then I ship. This will checkout the master merge my branch with it, and then push it to the origin. Once again I use a shell script for this.</p>

<p>ship.sh</p>

<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="c">#!/bin/sh -x</span>
<span class="gp">\# </span>Git workflow ship script from: http://reinh.com/blog/2008/08/27/hack-and-and-ship.html
<span class="gp">\# </span>git name-rev is fail
<span class="nv">ref</span><span class="o">=</span><span class="k">$(</span>git symbolic-ref HEAD 2&gt; /dev/null<span class="k">)</span> <span class="o">||</span> <span class="nb">exit </span>0
<span class="nv">CURRENT</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">ref</span><span class="p">#refs/heads/</span><span class="k">}</span><span class="s2">"</span>
git checkout master
git merge <span class="k">${</span><span class="nv">CURRENT</span><span class="k">}</span>
git push origin master
git checkout <span class="k">${</span><span class="nv">CURRENT</span><span class="k">}</span></code></pre></div>

<p>Now I’m done with my bug, and there’s a script for that ‘dwf’. This will move me back to the master, and delete my old branch.</p>

<p>dwf.sh</p>

<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="c">#!/bin/sh -x</span>
<span class="gp">\# </span>dwf, aka <span class="s2">"Done With Feature"</span> script: deletes current branch and puts you back on master
<span class="nv">ref</span><span class="o">=</span><span class="k">$(</span>git symbolic-ref HEAD 2&gt; /dev/null<span class="k">)</span> <span class="o">||</span> <span class="nb">exit </span>0
<span class="nv">CURRENT</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">ref</span><span class="p">#refs/heads/</span><span class="k">}</span><span class="s2">"</span>
git checkout master
git branch -d <span class="k">${</span><span class="nv">CURRENT</span><span class="k">}</span></code></pre></div>

<p>And we’re ready to repeat the whole process on a new bug/feature/chore.</p>

<p>You can even take this a bit farther, and create an alias for the last three commands ‘hsd’ (hack ship done)</p>

<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nb">alias </span><span class="nv">hsd</span><span class="o">=</span><span class="s2">"hack &amp;&amp; ship &amp;&amp; dwf"</span></code></pre></div>

<p>Pretty awesome! I’m sure there are hundreds of awesome workflows out there. What do you guys use on your projects?</p>
]]></content:encoded>
    </item>
    

  </channel>
</rss>
