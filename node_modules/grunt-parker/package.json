{
  "name": "grunt-parker",
  "version": "0.1.3",
  "description": "Grunt plugin for parker, a stylesheet analysis tool.",
  "keywords": [
    "gruntplugin",
    "parker",
    "stylesheet",
    "analysis",
    "css"
  ],
  "homepage": "https://github.com/leny/grunt-parker",
  "author": {
    "name": "leny",
    "email": "info@flatland.be",
    "url": "http://leny.me"
  },
  "contributors": [
    {
      "name": "Oliver Farrell",
      "url": "http://oliverjfarrell.co.uk"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/leny/grunt-parker.git"
  },
  "bugs": {
    "url": "https://github.com/leny/grunt-parker/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/leny/grunt-parker/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-coffeelint": "0.0.13",
    "grunt-contrib-coffee": "^0.12.0",
    "matchdep": "^0.3.0"
  },
  "peerDependencies": {
    "grunt": "^0.4.5"
  },
  "dependencies": {
    "chalk": "^0.5.1",
    "parker": "0.0.8"
  },
  "readme": "# grunt-parker\n\n![NPM version](http://img.shields.io/npm/v/grunt-parker.svg) ![Dependency Status](https://david-dm.org/leny/grunt-parker.svg) ![Downloads counter](http://img.shields.io/npm/dm/grunt-parker.svg)\n\n> Grunt plugin for [parker](https://github.com/katiefenn/parker), a stylesheet analysis tool.\n\n* * *\n\n## Getting Started\n\nThis plugin requires Grunt `~0.4.5`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-parker --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-parker');\n```\n\n## The \"parker\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `parker` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  parker: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    },\n  },\n});\n```\n\n### Options\n\n#### options.metrics\n\nType: `Array` (metric names)  \nDefault value: `false`\n\nAn array of the metrics to use in parker.  \nBy default, grunt-parker use all available metrics.\n\nBy now, grunt-parker accepts the following metrics :\n\n- `TotalStylesheets`\n- `TotalStylesheetSize`\n- `TotalRules`\n- `TotalSelectors`\n- `TotalIdentifiers`\n- `TotalDeclarations`\n- `SelectorsPerRule`\n- `IdentifiersPerSelector`\n- `SpecificityPerSelector`\n- `TopSelectorSpecificity`\n- `TopSelectorSpecificitySelector`\n- `TotalIdSelectors`\n- `TotalUniqueColours`\n- `UniqueColours`\n- `TotalImportantKeywords`\n- `TotalMediaQueries`\n- `MediaQueries`\n\n#### options.file\n\nType: `String` (file path)  \nDefault value: `false`\n\nA file path to log the reported results, in *markdown* format.  \nIf `false` is given, the file will not be written.\n\n#### options.title\n\nType: `String`  \nDefault value: `Grunt Parker Report`\n\nWhen logging the reported results to file, use this as title of the markdown document.\n\n#### options.colophon\n\nType: `Boolean`  \nDefault value: `false`\n\nWhen logging the reported results to file, use colophon and timestamp as footer of the markdown document.\n\n#### options.usePackage\n\nType: `Boolean`  \nDefault value: `false`\n\nWhen enabled, if you launch your grunt-packer task from a folder containing a `package.json` file (like 99% of use cases), grunt-packer will use some of the package's informations to make the report file a little more informative (use project's name as title, show version and description, links to the homepageâ€¦).\n\n### Usage Examples\n\n#### Default Options\n\nIn this example, the default options are used to shows the results of the parker analysis for the given files.\n\n```js\ngrunt.initConfig({\n  parker: {\n    options: {},\n    src: [\n      'test/*.css'\n    ],\n  },\n});\n```\n\n#### Custom Options\n\nIn this example, custom options are used to shows the results of the parker analysis for the given files, with only the four given metrics, and write the results on a file named `report.md`\n\n```js\ngrunt.initConfig({\n  parker: {\n    options: {\n      metrics: [\n        \"TotalRules\",\n        \"TotalSelectors\",\n        \"TotalIdentifiers\",\n        \"TotalDeclarations\"\n      ],\n      file: \"report.md\",\n      colophon: true,\n      usePackage: true\n    },\n    src: [\n      'test/*.css'\n    ]\n  }\n});\n```\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style.  \nLint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n* **2014/12/14** : v0.1.3\n* **2014/09/16** : v0.1.2\n* **2014/09/14** : v0.1.0\n",
  "readmeFilename": "README.md",
  "_id": "grunt-parker@0.1.3",
  "_from": "grunt-parker@~0.1.0"
}
